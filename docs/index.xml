<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jamie Collinson</title>
    <link>https://jamiecollinson.com/</link>
    <description>Recent content on Jamie Collinson</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Dec 2017 19:51:14 +0000</lastBuildDate>
    
	<atom:link href="https://jamiecollinson.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>My Emacs Config</title>
      <link>https://jamiecollinson.com/blog/my-emacs-config/</link>
      <pubDate>Mon, 04 Dec 2017 19:51:14 +0000</pubDate>
      
      <guid>https://jamiecollinson.com/blog/my-emacs-config/</guid>
      <description>Setup Configure package sources Add repositories we&#39;ll load packages from. I prefer to live on the bleeding edge so have only enabled melpa. Setting package-enable-at-startup to nil prevents a second package load and slightly improves startup time.
(add-to-list &amp;#39;package-archives &amp;#39;(&amp;#34;melpa&amp;#34; . &amp;#34;http://melpa.org/packages/&amp;#34;)) (setq package-enable-at-startup nil) Bootstrap use-package If use-package is not installed, install it.
(unless (package-installed-p &amp;#39;use-package) (package-refresh-contents) (package-install &amp;#39;use-package)) Set custom settings to load in own file This stops emacs adding customised settings to init.</description>
    </item>
    
    <item>
      <title>Faster Command Line Tools in Golang?</title>
      <link>https://jamiecollinson.com/blog/faster-command-line-tools-in-golang/</link>
      <pubDate>Wed, 31 May 2017 20:15:50 +0100</pubDate>
      
      <guid>https://jamiecollinson.com/blog/faster-command-line-tools-in-golang/</guid>
      <description>Having read the post faster command line tools in nim by Euan Torano1, I wanted to see how Go would compare. I am no golang expert, but have used it in production on a couple of reasonably sized projects, and have recently been enjoying it as a language for creating small terminal applications.
Replicating the functionality in go was pleasant but I&amp;rsquo;d hoped for better performance.
The task is to take a csv file, a column number to sum by and another to sum, and to return the label and total of the largest value.</description>
    </item>
    
    <item>
      <title>A guide to disassembling the Ricoh GR for sensor cleaning</title>
      <link>https://jamiecollinson.com/blog/disassembling-ricoh-gr-for-sensor-cleaning/</link>
      <pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecollinson.com/blog/disassembling-ricoh-gr-for-sensor-cleaning/</guid>
      <description>The Ricoh GR is an excellent camera. A camera which has managed to displace all my former dalliances due to it&amp;rsquo;s small size, near-perfect ergonomics and incredible performance. But it does have a design flaw. Dust gets sucked into the lens assembly far too easily.
On a recent trip I found lots of annoying dust spots. This is easy to fix, but tedious when you need to go through every.</description>
    </item>
    
    <item>
      <title>A mathematician, a physicist and an engineer...</title>
      <link>https://jamiecollinson.com/blog/a-mathematician-a-physicist-and-an-engineer/</link>
      <pubDate>Sat, 28 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jamiecollinson.com/blog/a-mathematician-a-physicist-and-an-engineer/</guid>
      <description>A mathematician, a physicist and an engineer are staying at a hotel1 for a conference.
The engineer wakes up in the middle of the night to find the end of his bed is on fire. He grabs the fire extinguisher, points it at the fire and sprays it until the fire is safely extinguished. He goes back to sleep content that he&amp;rsquo;s solved the problem.
The physicist wakes up in the middle of the night to find the end of his bed is on fire.</description>
    </item>
    
  </channel>
</rss>